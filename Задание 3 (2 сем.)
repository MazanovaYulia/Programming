using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LAB3Programming
{
  public class SquareMatrix
  {
    private int[,] data;

    private int row;
    public int Row { get => this.row; }
    private int col;
    public int Col { get => this.col; }

      public SquareMatrix(int row, int col)
      {
        this.row = row;
        this.col = col;
        this.data = new int[row, col];
      }

      public void WriteMatrix()
      {
        const int col = 5, row = 5;

        int[,] Matrix1 = new int[row, col];
        int[,] Matrix2 = new int[row, col];
        Random rand = new Random();

          for (int CounterJ = 0; CounterJ < col; CounterJ++)
          {
            for (int CounterI = 0; CounterI < row; CounterI++)
            {
              Matrix1[CounterI, CounterJ] = rand.Next(0, 10);
              Console.Write(Matrix1[CounterI, CounterJ]);
            }
              Console.WriteLine();
           }
             Console.WriteLine();

          for (int CounterJ = 0; CounterJ < col; CounterJ++)
          {
            for (int CounterI = 0; CounterI < row; CounterI++)
            {
              Matrix2[CounterI, CounterJ] = Matrix1[(col - 1) - CounterI, CounterJ];
              Console.Write(Matrix2[CounterI, CounterJ]);
            }
              Console.WriteLine();
          }
            Console.ReadKey();
      }

        public static SumMatrix(Matrix1, Matrix2)
        {
          SquareMatrix resMass = new Matrix(a.N);
          for (int i = 0; i < a.N; i++)
          {
            for (int j = 0; j < b.N; j++)
            {
              resMass[i, j] = a[i, j] + b[i, j];
            }
          }
            return resMass;
        }
        // Перегрузка сложения
        public static Matrix operator +(Matrix1, Matrix2)
        {
            return Matrix.Sum(a, b);
        }
        //Перегрузка умножения
        public static SquareMatrix operator * (Matrix1, SquareMatrix right) 
        {
          if (left.Size != right.Size) 
          {
            throw new SquareMatrixSizeException("Матрицы должны быть одного размера.");
          }
            var elementsAmount = left.Size * left.Size;
            double[,] elements = new double[left.Size, left.Size];
            var elementsCount = 0;
              for (var rowIndex = 0; rowIndex < left.Size; ++rowIndex) 
              {
                for (var columnIndex = 0; columnIndex < left.Size; ++columnIndex) 
                {
                  elements[rowIndex, columnIndex] = left.Matrix[rowIndex, columnIndex] * right.Matrix[rowIndex, columnIndex];
                  ++elementsCount;
                }
              }
              var name = "Result";
              return new SquareMatrix(left.Size, name, elements);
        }
        public static bool operator > (SquareMatrix left, SquareMatrix right) 
        {
          if (left.SumOfElements() > right.SumOfElements()) 
          {
            return true;
          }
            return false;
        }

        public static bool operator < (SquareMatrix left, SquareMatrix right) 
        {
          if (left.SumOfElements() < right.SumOfElements()) 
          {
            return true;
          }
            return false;
        }

        public static bool operator >= (SquareMatrix left, SquareMatrix right) 
        {
          if (left.SumOfElements() >= right.SumOfElements()) 
          {
            return true;
          }
            return false;
        }

        public static bool operator <= (SquareMatrix left, SquareMatrix right) 
        {
          if (left.SumOfElements() <= right.SumOfElements()) 
          {
            return true;
          }
            return false;
        }

        public static bool operator == (SquareMatrix left, SquareMatrix right) 
        {
          if (left.Size != right.Size) 
          {
            return false;
          }

            for (var rowIndex = 0; rowIndex < left.Size; ++rowIndex) 
            {
              for (var columnIndex = 0; columnIndex < left.Size; ++columnIndex) 
              {
                if (left.Matrix[rowIndex, columnIndex] != right.Matrix[rowIndex, columnIndex]) 
                  {
                        return false;
                  }
              }
            }
            return true;
        }

        public static bool operator != (SquareMatrix left, SquareMatrix right) 
        {
          if (left.Size != right.Size) 
          {
            return true;
          }
            for (var rowIndex = 0; rowIndex < left.Size; ++rowIndex) 
            {
              for (var columnIndex = 0; columnIndex < left.Size; ++columnIndex) 
              {
                if (left.Matrix[rowIndex, columnIndex] != right.Matrix[rowIndex, columnIndex]) 
                {
                  return true;
                }
              }
            }
             return false;
        }

        public static bool operator true (SquareMatrix matrix)
        {
          return (matrix.Determinant() != 0);
        }

        public static bool operator false (SquareMatrix matrix) 
        {
          return (matrix.Determinant() == 0);
        }

        public static implicit operator string (SquareMatrix matrix) 
        {
          var elementCount = 1;
          var result = "";
            for (var rowIndex = 0; rowIndex < matrix.Size; ++rowIndex) 
            {
              for (var columnIndex = 0; columnIndex < matrix.Size; ++columnIndex) 
              {
                result += ($"Element {elementCount}: {matrix.Matrix[rowIndex, columnIndex]}  ");
                    ++elementCount;
              }
            }
            return result;
        }

        public static implicit operator SquareMatrix (double[ , ] elements) 
        {
          var elementsAmount = elements.Length;
            if (elementsAmount % 2 == 0) 
            {
              var size = elementsAmount / 2;
              return new SquareMatrix(size, "Result", elements);
            } else 
              {
                throw new SquareMatrixSizeException("Array dimensions must be of the same lenght.");
              }
        }
}
        class Program
        {
            static void Main(string[] args)
            {
                
            }
        }
   
}
