/********************************************************************
Автор: Мазанова Ю.Н., ПИ-211                                        *
Задание 2/1: Класс для хранения информации об электронном документе *
********************************************************************/

using System;
using System.Reflection;


namespace ElectronicDocument {
     class LaboratoryWork {
         public struct Denotation {
             public string FileName;
             public string Author;
             public string Keywords;
             public string Subject;
            }
 
  [STAThread]
  static void Main(string[] args) {
     Console.WriteLine("Public:");
         foreach(FieldInfo fi in typeof(Denotation).GetFields() ) {
              Console.WriteLine("\t"+ fi.Name);
            }
     Console.WriteLine("NonPublic:");
         foreach(FieldInfo fi in typeof(Denotation).GetFields(BindingFlags.NonPublic | BindingFlags.Instance) ) {
              Console.WriteLine("\t"+ fi.Name);
            }
        }
    }
}
/********************************************************************************
Автор: Мазанова Ю.Н., ПИ-211                                                    *
Задание 2/2: Классы-наследники для документов MS Word, PDF, MS Excel, TXT, HTML *
*********************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inheritance {
  public abstract class ElectronicDocument {
    public string FileName {get; set;}
    public string Author {get; set;}
    public string Keywords {get; set;}
    public string Subject {get; set;}
    public string Type { get; protected set; }

    protected ElectronicDocument() { }

    protected ElectronicDocument(string fileName, string author, string keywords, string subject) {
      FileName = fileName;
      Author = author;
      Keywords = keywords;
      Subject = subject;
    }
      public abstract void Info();
  }
}

class MSWord : ElectronicDocument {
  public MS Word(string fileName, string author, string keywords, string subject) {
    Type = "Microsoft Word";
  }
  public override void Info() {
    Console.WriteLine("Тип документа: " + Type + "\n" + "Имя файла: " + fileName + "\n" + "Автор: " + author + "\n" + "Ключевые слова: " + keywords + "\n" + "Путь к файлу: " + subject + "\n" );
  }
}

class PDF : ElectronicDocument {
  public PDF(string fileName, string author, string keywords, string subject) {
    Type = "PDF";
  }
  public override void Info() {
    Console.WriteLine("Тип документа: " + Type + "\n" + "Имя файла: " + fileName + "\n" + "Автор: " + author + "\n" + "Ключевые слова: " + keywords + "\n" + "Путь к файлу: " + subject + "\n" );
  }
}

class MSExcel : ElectronicDocument {
  public MSExcel(string fileName, string author, string keywords, string subject) {
    Type = "Microsoft Excel";
  }
  public override void Info() {
    Console.WriteLine("Тип документа: " + Type + "\n" + "Имя файла: " + fileName + "\n" + "Автор: " + author + "\n" + "Ключевые слова: " + keywords + "\n" + "Путь к файлу: " + subject + "\n" );
  }
}

class TXT : ElectronicDocument {
  public TXT(string fileName, string author, string keywords, string subject) {
    Type = "TXT";
  }
  public override void Info() {
    Console.WriteLine("Тип документа: " + Type + "\n" + "Имя файла: " + fileName + "\n" + "Автор: " + author + "\n" + "Ключевые слова: " + keywords + "\n" + "Путь к файлу: " + subject + "\n" );
  }
}

class HTML : ElectronicDocument {
  public HTML(string fileName, string author, string keywords, string subject) {
    Type = "HTML";
  }
  public override void Info() {
    Console.WriteLine("Тип документа: " + Type + "\n" + "Имя файла: " + fileName + "\n" + "Автор: " + author + "\n" + "Ключевые слова: " + keywords + "\n" + "Путь к файлу: " + subject + "\n" );
  }
}

[STAThread]
static void Main(string[] args) {
  Console.WriteLine("Public:");
    foreach(FieldInfo fi in typeof(Denotation).GetFields() ) {
      Console.WriteLine("\t"+ fi.Name);
    }
  Console.WriteLine("NonPublic:");
    foreach(FieldInfo fi in typeof(Denotation).GetFields(BindingFlags.NonPublic | BindingFlags.Instance) ) {
      Console.WriteLine("\t"+ fi.Name);
    }  
}
  
class Program {
  static void Main(string[] args) {
    List<ElectronicDocument> documents = new List<ElectronicDocument>();
    documents.Add(new MSWord("Лаб1", "Мазанова Ю.Н.", "программирование"));
    documents.Add(new PDF("Лаб2", "Мазанова Ю.Н.", "с#"));
    documents.Add(new MSExcel("Лаб3", "Мазанова Ю.Н.", "таблица"));
    documents.Add(new TXT("Лаб4", "Мазанова Ю.Н.", "код"));
    documents.Add(new HTML("Лаб5", "Мазанова Ю.Н.", "страница"));
    
  foreach (ElectronicDocument document in documents)
    document.Info();

    Console.ReadKey();
   }
}

using Inheritance;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace Inheritance
{
    public class ElectronicDocument
    {
        public string FileName { get; set; }
        public string Author { get; set; }
        public string Keywords { get; set; }
        public string Subject { get; set; }
        public string Type { get; protected set; }

        protected ElectronicDocument() { }

        protected ElectronicDocument(string fileName, string author, string keywords, string subject, string Type)
        {
            FileName = fileName;
            Author = author;
            Keywords = keywords;
            Subject = subject;
        }
        public virtual void Infom()
        {
            Console.WriteLine("ElectronicDocument.Infom");
        }
    }
}

public class MSWord : ElectronicDocument
{
    public MSWord()
    {
    }

    public MSWord(string fileName, string author, string keywords, string subject, string Type)
    {
        Type = "Microsoft Word";
    }
    public override void Infom()
    {
        Console.WriteLine("Тип документа: " + Type + "\n" + "Имя файла: " + FileName + "\n" + "Автор: " + Author + "\n" + "Ключевые слова: " + Keywords + "\n" + "Путь к файлу: " + Subject + "\n");
    }
}

public class PDF : ElectronicDocument
{
    public PDF()
    {
    }

    public PDF(string fileName, string author, string keywords, string subject, string Type)
    {
        Type = "PDF";
    }
    public override void Infom()
    {
        Console.WriteLine("Тип документа: " + Type + "\n" + "Имя файла: " + FileName + "\n" + "Автор: " + Author + "\n" + "Ключевые слова: " + Keywords + "\n" + "Путь к файлу: " + Subject + "\n");
    }
}

public class MSExcel : ElectronicDocument
{
    public MSExcel()
    {
    }

    public MSExcel(string fileName, string author, string keywords, string subject, string Type)
    {
        Type = "Microsoft Excel";
    }
    public override void Infom()
    {
        Console.WriteLine("Тип документа: " + Type + "\n" + "Имя файла: " + FileName + "\n" + "Автор: " + Author + "\n" + "Ключевые слова: " + Keywords + "\n" + "Путь к файлу: " + Subject + "\n");
    }
}

public class TXT : ElectronicDocument
{
    public TXT()
    {
    }

    public TXT(string fileName, string author, string keywords, string subject, string Type)
    {
        Type = "TXT";
    }
    public override void Infom()
    {
        Console.WriteLine("Тип документа: " + Type + "\n" + "Имя файла: " + FileName + "\n" + "Автор: " + Author + "\n" + "Ключевые слова: " + Keywords + "\n" + "Путь к файлу: " + Subject + "\n");
    }
}

public class HTML : ElectronicDocument
{
    public string Version;
    public HTML()

    {
        Type = "HTML";
    }

    public HTML(string fileName, string author, string keywords, string subject, string Type, string version) 
    {
        FileName = fileName;
        Author = author;
        Keywords = keywords;
        Subject = subject;
        Type = "HTML";
        Version = version;
    }
    public override void Infom()
    {
        Console.WriteLine("Тип документа: " + Type + "\n" + "Имя файла: " + FileName + "\n" + "Автор: " + Author + "\n" + "Ключевые слова: " + Keywords + "\n" + "Путь к файлу: " + Subject + "\n"+ "Версия: " + Version+ "\n");
    }
}

//[STAThread]
//private static void Main()
//{
    //Console.WriteLine("Public:");
    //foreach (FieldInfo fi in typeof(Denotation).GetFields())
   // {
       // Console.WriteLine("\t" + fi.Name);
  //  }
  //  Console.WriteLine("NonPublic:");
   // foreach (FieldInfo fi in typeof(Denotation).GetFields(BindingFlags.NonPublic | BindingFlags.Instance))
   // {
     //   Console.WriteLine("\t" + fi.Name);
   // }
//}

internal class Denotation
{
}

class Program
{
    private static void InfomElectronicDocument (ElectronicDocument electronicdocument)
    {
        electronicdocument.Infom();
    }
    static void Main(string[] args)
    {
        ElectronicDocument MSW = new MSWord();
        ElectronicDocument pdf = new PDF();
        ElectronicDocument MSE = new MSExcel();
        ElectronicDocument txt = new TXT();
        ElectronicDocument html = new HTML();

        InfomElectronicDocument(MSW);
        InfomElectronicDocument(pdf);
        InfomElectronicDocument(MSE);
        InfomElectronicDocument(txt);
        InfomElectronicDocument(html);
        Console.ReadKey();
    }
}
